import base64, codecs
magic = 'IyBjb2xvcnMgdmFsdWVzIA0KUmVkID0gJ1wwMzNbMTszMW0nDQpCbHVlPSAnXDAzM1sxOzM2bScNCkVuZGMgPSAnXDAzM1swbScNCmltcG9ydCBzdWJwcm9jZXNzDQppbXBvcnQgc3lzDQppbXBvcnQgb3MNCmltcG9ydCByYW5kb20NCmltcG9ydCBzdWJwcm9jZXNzDQppbXBvcnQgc3lzDQppbXBvcnQgdGltZQ0KaW1wb3J0IHBsYXRmb3JtDQppbXBvcnQgd2ViYnJvd3Nlcg0KdmVybCA9IG9wZW4oImNvcmUvLnZlcnNpb24iLCAncicpLnJlYWQoKQ0KbGluZSA9ICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScNCg0KZGVmIGNscigpOg0KICAgIHRyeToNCiAgICAgICAgaWYgb3MubmFtZSA9PSAibnQiOg0KICAgICAgICAgICAgb3Muc3lzdGVtKCdjbHMnKQ0KICAgICAgICBlbHNlIDoNCiAgICAgICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHByaW50KEJsdWUrbGluZSwnXG4nKQ0KICAgICAgICAgICAgcHJpbnQoJ1xuXHRTb21ldGhpbmcgV3JvbmcgdG8gQ2xlYXIgLi5cblxuICAgICAgIFBsZWFzZSBDb250YWN0IFRvIERldmVsb3BlciAnKQ0KICAgICAgICAgICAgcHJpbnQoJ1xuXHQgICAgIEVycm9yIDogNTAwXG4nKQ0KICAgICAgICAgICAgcHJpbnQobGluZSkNCiAgICAgICAgICAgIHByaW50KFJlZCsnXG5cdFx0WyBTdWIgTWVudSBdJykNCiAgICAgICAgICAgIHByaW50KEJsdWUgKycnJ1xuWzAxXSBDb250YWN0IFRvIERldmVsb3BlclxuWzAyXSBBZ2FpbiBSdW4gSFBvbWIgVG9vbCcnJykNCiAgICAgICAgICAgIGVycm9yNTAwID0gaW5wdXQoJ1xuQ2hvb3NlIE9uZSBPcHRpb25zIDogJykNCiAgICAgICAgICAgIGlmIGVycm9yNTAwID09IDE6DQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5jYWxsKFtzeXMuZXhlY3V0YWJsZSwgJ2NvcmUvY29udGFjdC5weSddKQ0KICAgICAgICAgICAgZWxzZTogDQogICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5jYWxsKFtzeXMuZXhlY3V0YWJsZSwgJ2hwb21iLnB5J10pDQogICAgICAgICAgICANCg0KZGVmIGJhbm5lcigpOg0KICAgIGNscigpDQogICAgbG9nbz0iIiINCiDilojilojilpEg4paI4paIICDilojilojilpPilojilojiloggICDilpLilojilojilojilojiloggICDilojilojilojiloQg4paE4paI4paI4paI4paTIOKWhOKWhOKWhOKWhCAgIA0K4paT4paI4paI4paRIOKWiOKWiOKWkuKWk+KWiOKWiOKWkSAg4paI4paI4paS4paS4paI4paI4paSICDilojilojilpLilpPilojilojilpLiloDilojiloAg4paI4paI4paS4paT4paI4paI4paI4paI4paI4paEIA0K4paS4paI4paI4paA4paA4paI4paI4paR4paT4paI4paI4paRIOKWiOKWiOKWk+KWkuKWkuKWiOKWiOKWkSAg4paI4paI4paS4paT4paI4paIICAgIOKWk+KWiOKWiOKWkeKWkuKWiOKWiOKWkiDiloTilojilogNCuKWkeKWk+KWiCDilpHilojilogg4paS4paI4paI4paE4paI4paT4paSIOKWkuKWkuKWiOKWiCAgIOKWiOKWiOKWkeKWkuKWiOKWiCAgICDilpLilojilogg4paS4paI4paI4paR4paI4paAICANCuKWkeKWk+KWiOKWkuKWkeKWiOKWiOKWk+KWkuKWiOKWiOKWkiDilpEgIOKWkeKWkSDilojilojilojilojilpPilpLilpHilpLilojilojilpIgICDilpHilojilojilpLilpHilpPiloggIOKWgOKWiOKWkw0KIOKWkiDilpHilpHilpLilpHilpLilpLilpPilpLilpEg4paRICDilpHilpEg4paS4paR4paS4paR4paS4paRIOKWkSDilpLilpEgICDilpEgIOKWkeKWkeKWkuKWk+KWiOKWiOKWiOKWgOKWkg0KIOKWkiDilpHilpLilpEg4paR4paR4paSIOKWkSAgICAgICDilpEg4paSIOKWkuKWkSDilpEgIOKWkSAgICAgIOKWkeKWkuKWkeKWkiAgIOKWkSANCiDilpEgIOKWkeKWkSDilpHilpHilpEgICAgICAg4paRIOKWkSDilpEg4paSICDilpEgICAgICDilpEgICAg4paRICAgIOKWkSANCiDilpEgIOKWkSAg4paRICAgICAgICAgICAgIOKWkSDilpEgICAgICAgICDilpEgICAg4paRICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4paRIA0KICAgICAgICAgICAgICAgIiIiLCIiIg0KLS0tLS0tLS0tLS0tLS0tLSAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCnwgICBTZWNhbm9uICAgIHwgICB8IFZlcnNpb24gOiAiIiIsdmVybCwiIiIgfA0KLS0tLS0tLS0tLS0tLS0tLSAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCg0KXHRDcmVhdGVkIGJ5IEhvbmV5IFBvdHMuLi4NCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIiIiDQogICAgcHJpbnQoUmVkK2xvZ29bMF0rQmx1ZStsb2dvWzFdK2xvZ29bMl0rbG9nb1szXSkNCg0KZGVmIGluc3RhbGxhdGlvbmFsKCk6DQogICAgYmFubmVyKCkNCiAgICBpbnN0YWxsID0gJ2NvcmUvLmluc3RhbGwnDQogICAgaW5zdGZsdyA9IG9wZW4oaW5zdGFsbCwnYScpDQogICAgaW5zdGZsID0gb3BlbihpbnN0YWxsLCdyJykNCiAgICBpbnN0ZmxyID0gaW5zdGZsLnJlYWQoKQ0KICAgIGlmIGluc3RmbHIgOg0KICAgICAgICBwYXNzDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJ1x0IFBsZWFzZSBXYWl0IEhQb21iIEluc3RhbGxcblxuJykNCiAgICAgICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dCcpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG9zLnN5c3RlbSgncGlwMyBpbnN0YWxsIG5vdGlmeTIgJykNCiAgICAgICAgICAgIGlmIHBsYXRmb3JtLnN5c3RlbSA9PSAnTGludXgnIDoNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ2FwdCBpbnN0YWxsICBweXRob24zLWRidXMnKQ0KICAgICAgICAgICAgZWxpZiBwbGF0Zm9ybS5zeXN0ZW0gPT0gJ1dpbmRvd3MnIDogDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdwaXAzIGluc3RhbGwgZGJ1cy1weXRob24nKQ0KICAgICAgICAgICAgZWxpZiBwbGF0Zm9ybS5zeXN0ZW0gPT0gJ0RhcndpbicgOg0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnYnJldyBpbnN0YWxsICBweXRob24zLWRidXMnKQ0KICAgICAgICAgICAgZWxpZiBwbGF0Zm9ybS5zeXN0ZW0gPT0gJ2N5Z3dpbicgOg0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgnYXB0IGluc3RhbGwgIHB5dGhvbjMtZGJ1cycpDQogICAgICAgICAgICBlbHNlIDogDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdhcHQgaW5zdGFsbCAgcHl0aG9uMy1kYnVzJykNCiAgICAgICAgICAgIA0KICAgICAgICBleGNlcHQgOg0KICAgICAgICAgICAgcHJpbnQoIiAgTm90aWZpY2F0aW9uIEZlYXR1cmUgTm90IFdvcmsgaW4gWW91ciBTeXN0ZW0iKQ0KICAgICAgICBpbnN0Zmx3LndyaXRlKCcxJykNCiAgICAgICAgaW5zdGZsLmNsb3NlKCkNCiAgICAgICAgcHJpbnQoJ1xuXHQgSW5zdGFsbGF0aW9uYWwgU3VjY2Vzc2Z1bCcpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCnVzZXJpZD0iIg0KZGVmIGJhbm5lcl9pZCgpOg0KICAgIGdsb2JhbCB1c2VyaWQNCiAgICBjbHIoKQ0KICAgIGlkX3BhdGggPSAnY29yZS8uZGEnDQogICAgaWRfY2hlY2sgPSBvcGVuKGlkX3BhdGgsJ2EnKQ0KICAgIGlkX3JlYWQgPSBvcGVuKGlkX3BhdGgsJ3InKQ0KICAgIGlkID0gaWRfcmVhZC5yZWFkKCkNCiAgICBpZiBpZDoNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZGF0YSA9IHsgJ2lkJzogaWQgfQ0KICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vaG9uZXlwb3RzLnRlY2gvcC9IUG9tYi91c2VyL3VzZS5waHAnDQogICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KHVybD11cmwgLCBwYXJhbXM9ZGF0YSkNCiAgICAgICAgICAgIHNfY29kZSA9IHIuc3RhdHVzX2NvZGUNCiAgICAgICAgICAgIGlmIGludChzX2NvZGUpID09IDIwMCA6DQogICAgICAgICAgICAgICAgdXNlX3RpbWUgPSByLnRleHQNCiAgICAgICAgICAgICAgICB1c2VfdGltZSA9IHVzZV90aW1lLnN0cmlwKCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgYmFubmVyKCkNCiAgICAgICAgICAgICAgICBwcmludCgnXG5cdFNvbWV0aGluZyBXcm9uZyBUbyBHZXQgSVwnRFxuXG4gICAgICAgUGxlYXNlIENvbnRhY3QgVG8gRGV2ZWxvcGVyICcpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1xuXHQgICAgIEVycm9yIDogNTAxXG4nKQ0KICAgICAgICAgICAgICAgIHByaW50KGxpbmUpDQogICAgICAgICAgICAgICAgcHJpbnQoUmVkKydcblx0XHRbIFN1YiBNZW51IF0nKQ0KICAgICAgICAgICAgI'
love = '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'
god = 'jilojilpIg4paRICDilpHilpEg4paI4paI4paI4paI4paT4paS4paR4paS4paI4paI4paSICAg4paR4paI4paI4paS4paR4paT4paIICDiloDilojilpMNCiDilpIg4paR4paR4paS4paR4paS4paS4paT4paS4paRIOKWkSAg4paR4paRIOKWkuKWkeKWkuKWkeKWkuKWkSDilpEg4paS4paRICAg4paRICDilpHilpHilpLilpPilojilojilojiloDilpINCiDilpIg4paR4paS4paRIOKWkeKWkeKWkiDilpEgICAgICAg4paRIOKWkiDilpLilpEg4paRICDilpEgICAgICDilpHilpLilpHilpIgICDilpEgDQog4paRICDilpHilpEg4paR4paR4paRICAgICAgIOKWkSDilpEg4paRIOKWkiAg4paRICAgICAg4paRICAgIOKWkSAgICDilpEgDQog4paRICDilpEgIOKWkSAgICAgICAgICAgICDilpEg4paRICAgICAgICAg4paRICAgIOKWkSAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKWkSANCiAgICAgICAgICAgICAgICIiIiwiIiINCi0tLS0tLS0tLS0tLS0tLS0gICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCnwgICBTZWNhbm9uICAgIHwgICAgIHwgVmVyc2lvbiA6ICIiIix2ZXJsLCIiIiB8DQotLS0tLS0tLS0tLS0tLS0tICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQoNClx0Q3JlYXRlZCBieSBIb25leSBQb3RzLi4uDQoNCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIA0KICBJRCA6ICIiIixpZCwiIiIgICAgVVNFIDogIiIiLHVzZV90aW1lLCIiIiAgICBVU0VSIDogIiIiLHVzZXJkaWZmLCIiIiAgICAgICAgDQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBcbiIiIg0KICAgIHByaW50KFJlZCtsb2dvWzBdK0JsdWUrbG9nb1sxXStsb2dvWzJdK2xvZ29bM10rbG9nb1s0XStsb2dvWzVdK2xvZ29bNl0rbG9nb1s3XStsb2dvWzhdK2xvZ29bOV0pDQoNCmRlZiBob21lKCk6DQogICAgcHJpbnQoUmVkICsiIiIgICAgICAgICAgICBbIE1haW4gTWVudSBdIFxuIiIiKyBCbHVlICsgIiIiDQogICAgICAgIA0KWzAxXSBNYWlsIEJvbWJpbmcNClswMl0gU01TIEJvbWJpbmcgDQpbMDNdIENhbGwgQm9tYmluZyANClswNF0gVGVsZWdyYW0gQm9tYmluZyBbSW4gdjIwMjEuMV0NClswNV0gV2hhdCdzIE5ldyANClswNl0gSGVscCBbIFR1dG9yaWFscyBdDQpbMDddIFJlcG9ydCBCdWcgDQpbMDhdIENvbnRhY3QgVG8gRGV2ZWxvcGVyDQpbMDldIEV4aXQNCiIiIikNCg0KZGVmIHVwZGF0ZSgpOg0KICAgIG15ZmlsZSA9IFsnaHBvbWIucHknLCdjb3JlL21sLnB5JywnY29yZS9zbWNsLnB5JywnY29yZS9jbC5weScsICdjb3JlL3RnLnB5JywnY29yZS8udmVyc2lvbicsJ3JlcXVpcmVtZW50cy50eHQnXQ0KICAgIGZvciBmIGluIG15ZmlsZToNCiAgICAgICAgZmwgPSBzdHIoZikNCiAgICAgICAgcmVxID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2VjYW5vbm0vSFBvbWIvbWFzdGVyLyIgKyBmKQ0KICAgICAgICBkYXQgPSByZXEudGV4dA0KICAgICAgICBmaWxlID0gb3BlbihmbCwgJ3cnKQ0KICAgICAgICBmaWxlLndyaXRlKGRhdCkNCiAgICAgICAgZmlsZS5jbG9zZSgpDQogICAgcHJpbnQoJ1xuXHQgICAgVXBkYXRlZCBTdWNjZXNzZnVsbCAhISEnKQ0KICAgIGlucHV0KCdcblx0UHJlc3MgRW50ZXIgVG8gUnVuIEFnYWluIEhCb21iIFRvb2w6ICcpDQogICAgc3VicHJvY2Vzcy5jYWxsKFtzeXMuZXhlY3V0YWJsZSwgJ2hwb21iLnB5J10pDQoNCmRlZiBuZXRfdXBkYXRlX2FjdGl2ZSgpOg0KICAgIGJhbm5lcigpDQogICAgdHJ5Og0KICAgICAgICByID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL3d3dy5nb29nbGUuY29tJykNCiAgICBleGNlcHQ6DQogICAgICAgICAgICBwcmludCgnXG4gICAgIFlvdXIgSW50ZXJuZXQgQ29ubmVjdGlvbiBTbG93IC4uLiAnKQ0KICAgICAgICAgICAgcHJpbnQoJ1xuXHQgICAgIEVycm9yIDogNTA0XG4nKQ0KICAgICAgICAgICAgcHJpbnQobGluZSkNCiAgICAgICAgICAgIGlucHV0KCdcblx0UHJlc3MgRW50ZXIgVG8gUnVuIEFnYWluIEhCb21iIFRvb2w6ICcpDQogICAgICAgICAgICBzdWJwcm9jZXNzLmNhbGwoW3N5cy5leGVjdXRhYmxlLCAnaHBvbWIucHknXSkNCiAgICBwcmludCgnXG5cdCAgICBDaGVja2luZyBGb3IgVXBkYXRlcy4uLicpDQogICAgdmVyX3IgPSByZXF1ZXN0cy5nZXQoDQogICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vc2VjYW5vbm0vSFBvbWIvbWFzdGVyL2NvcmUvLnZlcnNpb24iKQ0KICAgIHZlciA9IHZlcl9yLnRleHQNCiAgICB0cnk6DQogICAgICAgIHZlcmwgPSBvcGVuKCJjb3JlLy52ZXJzaW9uIiwgJ3InKS5yZWFkKCkNCiAgICBleGNlcHQ6DQogICAgICAgIHBhc3MNCiAgICBpZiB2ZXIgIT0gdmVybDoNCiAgICAgICAgcHJpbnQoJ1xuXHROZXcgVmVyc2lvbiBBdmFpbGFibGUgOiAnLCB2ZXIpDQogICAgICAgIHByaW50KCdcblx0ICBIQm9tYiBUb29sIFN0YXJ0IFVwZGF0aW5nLi4uJykNCiAgICAgICAgdXBkYXRlKCkNCiAgICBwcmludCgiXG5cdFlvdXIgVmVyc2lvbiBpcyBVcC1Uby1EYXRlIikNCiAgICBwcmludCgnXG5cdCAgICAgU3RhcnRpbmcgSFBvbWIuLi5cbicpDQogICAgdGltZS5zbGVlcCgxKQ0KDQoNCmluc3RhbGxhdGlvbmFsKCkNCnRyeToNCiAgICBpbXBvcnQgcmVxdWVzdHMNCmV4Y2VwdDoNCiAgICBwcmludChCbHVlK2xpbmUsJ1xuJykNCiAgICBwcmludCgnXG5cdFNvbWV0aGluZyBXcm9uZyBUbyBJbXBvcnQgIC4uXG5cbiAgICAgICBQbGVhc2UgQ29udGFjdCBUbyBEZXZlbG9wZXIgJykNCiAgICBwcmludCgnXG5cdCAgICAgRXJyb3IgOiA1MDhcbicpDQogICAgcHJpbnQobGluZSkNCiAgICBwcmludChSZWQrJ1xuXHRcdFsgU3ViIE1lbnUgXScpDQogICAgcHJpbnQoQmx1ZSArJycnXG5bMDFdIENvbnRhY3QgVG8gRGV2ZWxvcGVyXG5bMDJdIEFnYWluIFJ1biBIUG9tYiBUb29sJycnKQ0KICAgIGVycm9yNTA4ID0gaW5wdXQoJ1xuQ2hvb3NlIE9uZSBPcHRpb25zIDogJykNCiAgICBpZiBlcnJvcjUwOCA9PSAxOg0KICAgICAgICBzdWJwcm9jZXNzLmNhbGwoW3N5cy5leGVjdXRhYmxlLCAnY29yZS9jb250YWN0LnB5J10pDQogICAgZWxzZTogDQogICAgICAgIHN1YnByb2Nlc3MuY2FsbChbc3lzLmV4ZWN1dGFibGUsICdocG9tYi5weSddKQ0KDQpuZXRfdXBkYXRlX2FjdGl2ZSgpDQoNCmJhbm5lcl9pZCgpDQpob21lKCkNCg0KZGVmIGJ1Z3JlcG9ydCgpOg0KICAgIGdsb2JhbCB1c2VyaWQNCiAgICBiYW5uZXIoKQ0KICAgIHByaW50KCJcbiIpDQogICAgYnVnID0gaW5wdXQoIlBsZWFzZSBUeXBlIFlvdXIgUHJvYmxlbSAmIEJ1ZyBSZXBvcnQ6ICIpDQogICAgbWFpbCA9IGlucHV0KCJQbGVhc2UgRW50ZXIgWW91ciBHTWFpbCBJRCBGb3IgQ29udGFjdCA6ICIpDQogICAgaW1wb3J0IHBsYXRmb3JtDQogICAgaW1wb3J0IG9zDQogICAgcGxhdGZvcm1uYW1lID0gc3RyKHBsYXRmb3JtLnN5c3RlbSgpKQ0KICAgIHBsYXRmb3Jtbm9kZSA9IHN0cihwbGF0Zm9ybS5ub2RlKCkpDQogICAgdHJ5Og0KICAgICAgICBoZWxsbyA9IHN0cihvcy5zeXN0ZW0oIndoaWNoIHB5dGhvbjMgPiBjb3JlL3N5cy50eHQiKSkNCiAgICAgICAgaGVsbG8gPSBvcGVuKCJjb3JlL3N5cy50eHQiLCAncicpLnJlYWQoKS5zdHJpcCgpDQogICAgICAgIGhlID0gaGVsbG8uZmluZCgiY29tLnRlcm11eCIpDQogICAgICAgIGlmIGhlID4gMCA6DQogICAgICAgICAgICBvcyA9ICJBbmRyb2lkIg0KICAgICAgICBlbHNlIDoNCiAgICAgICAgICAgIG9zPSAiTGludXgiDQogICAgZXhjZXB0Og0KICAgICAgICBvcyA9ICJXaW5kb3dzIg0KDQogICAgbmFtZSA9IHBsYXRmb3JtbmFtZSArIiAtICIrIHN0cihvcykNCiAgICB0cnk6DQogICAgICAgIHIgPSByZXF1ZXN0cy5nZXQodXJsPSJodHRwczovL2hvbmV5cG90cy50ZWNoL3AvSFBvbWIvdXNlci9yZXBvcnQucGhwIiwgcGFyYW1zPXsnbWFpbCc6IG1haWwgLCAnYnVnJzogYnVnICwiaWQiOnVzZXJpZCwnbmFtZSc6bmFtZX0pDQogICAgICAgIG15Y29kID0gci50ZXh0DQogICAgICAgIG15Y29kZSA9IG15Y29kLnN0cmlwKCkNCiAgICAgICAgaWYgaW50KG15Y29kZSkgPT0gMSA6DQogICAgICAgICAgICBwcmludCgiXG5cbiAgICAgIC0tIFRoYW5rIFlvdSBGb3IgWW91ciBGZWVkQmFjayAtLSAiKQ0KICAgICAgICAgICAgcHJpbnQoIiAgIFd'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
